🔌 2. TCP (Transmission Control Protocol) Bağlantısı Nedir?
🔸 Görevi:
DNS ile IP adresini aldıktan sonra, tarayıcı bu adrese veri gönderebilmek için bir bağlantı kurmalıdır. Bu bağlantı, TCP üzerinden kurulur.

🔹 Özellikleri:
Güvenilirdir: Veriler eksiksiz ve sırayla iletilir.

Bağlantı temellidir: Önce bağlantı kurulur, sonra veri gider.

🔹 Bağlantı Nasıl Kurulur? (3 Yollu El Sıkışma)
TCP bağlantısı, 3 adımlı bir "el sıkışma" (handshake) ile kurulur:

SYN: Tarayıcı (istemci) bağlantı kurmak istediğini sunucuya bildirir.

SYN-ACK: Sunucu isteği kabul eder ve onay gönderir.

ACK: Tarayıcı bu onayı alır ve bağlantı kurulur.

*****************************************************

🌐 HTTP ve TCP Neden İkisi de Gerekli?
🧱 1. Protokol Katmanları Ayrıdır
İnternette iletişim katmanlı bir yapıya sahiptir.
Her katman, belirli bir sorunu çözer:

Katman	    Örnek Protokol	Görevi
Uygulama	HTTP	        Ne gönderileceği (veri formatı, istek türü vs)
Taşıma	    TCP	            Veriyi güvenli ve sıralı iletmek
İnternet	IP	            Hedefe nasıl ulaşılacağını belirler
Fiziksel/Ağ	Ethernet/Wi-Fi	Donanım iletişimi

HTTP ve TCP aynı şeyi yapmaz, birbirlerini tamamlar.

🔁 Şöyle Düşün:
📦 HTTP → "Ne" gönderileceğini tanımlar
🚚 TCP → "Nasıl" gönderileceğini çözer
🎯 Örneğin:
Sen:

“Merhaba Seccad, bana son gönderdiğin dosyayı tekrar yollar mısın?”

Bu HTTP’dir → İletinin anlamı.

Postacı:

“Tamam, güvenli ve sırayla ulaştıracağım.”

Bu TCP’dir → İletinin fiziksel taşınması.

🧠 Teknik Özet
Protokol	Katman	Görevi
TCP	Taşıma (Transport)	Veriyi paketler halinde, sıralı ve güvenli şekilde iletmek
HTTP	Uygulama (Application)	İletilen verinin biçimini ve anlamını tanımlamak (örn: GET, POST, JSON, HTML vs.)

❓ O Zaman: Neden HTTP direkt IP üzerinden gitmiyor?
Çünkü:

IP güvenli değil (veriler eksik veya karışık gidebilir),

TCP, veri iletimini sıralar, eksikleri tekrar gönderir, doğrular.

HTTP buna ihtiyaç duyar çünkü:

"Benim için bu JSON dosyası eksiksiz ve sırayla ulaşmalı!"

🔄 HTTP Olmasa Ne Olurdu?
TCP üzerinden sadece "ham veri" gönderirdin. Ne olduğunu anlamak zor olurdu.

Örn:

GET /anasayfa HTTP/1.1
olmayan bir sistemde sadece:


anasayfa
gönderirdin. Ne demek bu? GET mi, POST mu? JSON mı, HTML mi?
İşte bu anlamsal yapıyı HTTP getiriyor.

✅ Sonuç
🔌 TCP → Güvenli, sıralı, hatasız veri iletimi (kablo gibi)

📬 HTTP → Ne gönderdiğimizi açıklayan kurallar bütünü (mesaj yapısı)

İkisi birlikte:

“Anlamlı ve güvenli iletişim”

******************************************

🚀 TCP’nin Temel Amacı Nedir?
Verileri doğru, eksiksiz ve sıralı şekilde iletmek.
Yani:

✅ Paketler eksiksiz ulaşmalı
✅ Paketler doğru sırada olmalı
✅ Karşı taraf paketi aldığını bildirmeli
✅ Eksik varsa tekrar gönderilmeli

🧱 TCP Nasıl Çalışır? (Adım Adım)
🔹 1. Bağlantı Kurma (3 Yönlü El Sıkışma – 3-Way Handshake)
İstemci ile sunucu birbirine bağlanmak için şu 3 adımı izler:

SYN
→ İstemci bağlantı isteği gönderir.
(SYN: Synchronize)

SYN-ACK
→ Sunucu isteği kabul eder ve onay verir.
(ACK: Acknowledge – "Aldım" demek)

ACK
→ İstemci, sunucunun onayını aldığını bildirir.

✔️ Artık bağlantı hazır! Veri alışverişi başlayabilir.

🔹 2. Veri Gönderimi
Veri, paketlere bölünerek gönderilir.
TCP bu paketleri numaralandırır (örn. 1, 2, 3, ...).
Alıcı her paketi aldıkça göndericiye “ack” (onay) gönderir.

📦 Örnek:

Gönderici: "Paket 1 geldi mi?"

Alıcı: "Evet aldım. Devam et."

Eğer paket eksikse, TCP onu otomatik olarak yeniden gönderir.

🔹 3. Veri Sıralama
Gelen paketler doğru sırada olmayabilir. TCP bunları sıraya dizer.
Örn: 3, 1, 2 → TCP bunu 1, 2, 3 yapar.

🔹 4. Veri Bütünlüğü (Hataları Kontrol Etme)
Her pakette kontrol toplamı (checksum) bulunur.
Alıcı bu değeri kontrol ederek paketin bozulup bozulmadığını anlar.

🔹 5. Bağlantıyı Kapatma (4 Adımda)
Bağlantı şu adımlarla kapanır:

İstemci: “Kapatmak istiyorum” (FIN)

Sunucu: “Tamam aldım” (ACK)

Sunucu: “Ben de kapatmak istiyorum” (FIN)

İstemci: “Tamam, kapattım” (ACK)

📌 TCP'nin Özellikleri
Özellik	Açıklama
Güvenilir	Veri eksiksiz ve sıralı gelir.
Bağlantı temelli	Bağlantı kurulmadan veri gönderilmez.
Ağ trafiği kontrolü	Yavaş alıcılar için hız ayarı yapar.
Paket tekrar gönderimi	Kayıp olursa yeniden gönderilir.

🧠 Gerçek Hayat Benzetmesi
Diyelim ki bir kitap gönderiyorsun ama posta kutusuna sığmadığı için parçalara ayırıyorsun:

Her parçayı numaralandırıyorsun (1, 2, 3…)

Alıcı her parçayı alınca "geldi" diye sana haber veriyor

Bir parça kaybolursa sen yeniden gönderiyorsun

Tüm parçalar doğru sırayla alınınca kitap okunabilir hale geliyor

Bu işte tam olarak TCP’nin yaptığı şeydir.

🎯 Sonuç
TCP, internetteki en güvenilir taşıma protokolüdür.

HTTP, FTP, SMTP gibi üst seviye protokoller TCP’ye dayanır.

Eksiksiz ve doğru veri iletimi için vazgeçilmezdir.

İstersen şimdi bunu bir örnekle bağlayalım:
✅ Tarayıcı TCP ile bağlantı kurar
✅ Sonra HTTP ile "GET /index.html" der
✅ TCP bu mesajı sıralı şekilde taşır
✅ Sunucu cevabı TCP ile yollar, HTTP mesajı olarak döner

İstersen şimdi UDP ile farkı, TCP bağlantı detayları, ya da Wireshark ile analiz kısmına geçebiliriz. Hangisi ilgini çeker?