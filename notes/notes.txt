✅ Node.js Nedir?
Node.js, JavaScript'i sadece tarayıcıda değil, sunucu tarafında da çalıştırmamızı sağlayan açık kaynaklı bir runtime (çalışma zamanı ortamıdır).

🎯 Neden Ortaya Çıktı?
Eskiden JavaScript sadece tarayıcı içinde çalışan bir dildi. Ama sunucu tarafında işler PHP, Python, Java gibi dillerle yapılırdı.
2009 yılında Ryan Dahl, JavaScript’i tarayıcı dışında da çalıştırmak için Chrome’un V8 motorunu kullanarak Node.js’i geliştirdi.

🔧 Temel Özellikleri

V8 Engine: Google Chrome’un JavaScript motorudur. Node.js, bu motor sayesinde JS'i tarayıcı dışında çalıştırır.

Tek iş parçacığı (single-threaded): Node.js tek thread üzerinde çalışır, ama asenkron yapısı sayesinde yüksek performans sağlar.

Olay güdümlü (event-driven): Her şey bir olay ile başlar, örn. “Bir dosya okundu”, “Kullanıcı istek gönderdi”.

Asenkron I/O (non-blocking): Ağ, dosya işlemleri gibi I/O işlemlerinde engelleme (blocking) yapmaz.

Modül Sistemi: require ile modül içeri aktarılır. Her dosya kendi kapsülünde çalışır.

📁 Yerleşik (built-in) Modüller
Node.js birçok hazır modülle gelir. Örnekler:

fs: Dosya sistemi işlemleri (okuma, yazma, silme)
http: HTTP sunucusu oluşturmak için
path: Dosya yollarıyla çalışma (uzantı, klasör, vs.)
os: İşletim sistemi bilgilerine erişim
events: EventEmitter sınıfı üzerinden olayları yönetme

🌍 Nerelerde Kullanılır?

Web sunucuları (Express.js ile)
API sunucuları (REST, GraphQL)

CLI araçları (örn: Vite, ESLint, Webpack)
Gerçek zamanlı uygulamalar (Chat, WebSocket)
Dosya/dizin işlemleri (otomasyon, build tool)
Mikroservisler

⚠️ Dezavantajları

CPU-heavy işlemlerde yavaş olabilir (örneğin büyük resim işleme).

Tek thread ile çalıştığı için CPU bloklayan işlemlerde dikkatli kullanılmalı.

Tip güvenliği yok (TypeScript ile aşılabilir).

🧠 Özet

Dil: JavaScript

Ortam: Sunucu (server-side)

Motor: Chrome V8

Yapı: Tek iş parçacığı, asenkron

Kullanım Alanı: Web sunucuları, API, CLI araçlar, otomasyon

Örnek: Express.js, Vite, Next.js CLI, PM2

/******************************************/

V8 Motoru Nedir?

V8, Google tarafından geliştirilen yüksek performanslı bir JavaScript motorudur. İlk olarak Google Chrome tarayıcısında kullanılmak üzere tasarlanmıştır. C++ ile yazılan bu motor, JavaScript kodunu makine diline çevirerek hızlı bir şekilde çalıştırır.

V8'in Temel Özellikleri

Just-In-Time (JIT) Compiler: JavaScript kodunu anında makine koduna dönüştürerek yüksek performans sağlar.
Garbage Collector: Kullanılmayan bellek alanlarını otomatik olarak temizler.
Optimizasyon: Sık kullanılan kodları analiz ederek daha verimli hale getirir.
ECMAScript Desteği: Yeni JavaScript standartlarını destekler (ES6 ve sonrası).

Node.js ile V8 Arasındaki İlişki :

Node.js, V8 motorunu kullanarak JavaScript'i tarayıcı dışında çalıştırmayı sağlar. Normalde JavaScript tarayıcı ortamında çalışırken, Node.js sayesinde sunucu tarafında da çalıştırılabilir.

Node.js, V8 motorunu alır ve tarayıcıya özgü özellikleri (DOM, window gibi) çıkararak yerine sunucu işlemleri için gerekli modülleri (fs, http gibi) ekler. Böylece JavaScript, sunucu tarafında çalışabilen bir dil haline gelir.

JavaScript Motoru ile Çalışma Ortamı Arasındaki Fark

JavaScript Motoru: JavaScript kodunu çalıştıran temel yapıdır (örneğin V8). Kodun nasıl işleneceğini ve çalıştırılacağını belirler.

JavaScript Çalışma Ortamı: Motorun yanında ek API'ler ve özellikler sunar (örneğin tarayıcı veya Node.js). Tarayıcıda DOM ve window gibi özellikler sunarken, Node.js'te dosya sistemi ve ağ işlemleri gibi modüller ekler.

Özet

V8, JavaScript kodunu hızlı çalıştırmak için Google tarafından geliştirilen bir motordur.

Node.js, V8 motorunu kullanarak JavaScript'i sunucu tarafında çalıştırır.

JavaScript motoru kodu çalıştırırken, çalışma ortamı ek özellikler ve API'ler sunar.

Tarayıcı ve Node.js, farklı çalışma ortamları sunan iki önemli örnektir.

/******************************************/


✅ Uygulama İlk Olarak Nereden Başlar?
Vite, React uygulamasını başlatmak için şu sıralamayı izler:

index.html

Uygulamanın temel HTML yapısını barındırır.
div id="root" burada yer alır.


<script type="module" src="/src/main.jsx"></script> ile JavaScript başlatılır.

src/main.jsx

React uygulamasının giriş noktasıdır.

App.jsx

Tüm uygulamanın merkezidir.

🎨 Stil Dosyaları
Dosya	        Açıklama
App.css	        Uygulamanın genel stilini tanımlar.
index.css	    Genelde global CSS (reset, root değişkenleri, fontlar) burada tanımlanır.

⚙️ Konfigürasyon Dosyaları
Dosya	            Açıklama
.gitignore	        Git'e dahil edilmeyecek dosyaları belirtir (örneğin node_modules).
eslint.config.js	Kod kalitesini sağlamak için lint kuralları.
index.html	        HTML giriş noktası, sadece Vite için özel bir yapı.

📦 node_modules/
Projede kullanılan tüm paketlerin bulunduğu klasör.

Otomatik olarak npm install veya yarn ile oluşur.

/******************************************/

NPM NEDİR?

Node Package Manager (NPM), JavaScript dünyasında vazgeçilmez bir paket yönetim sistemidir. Geliştiricilere hazır kod modüllerini kolayca kullanma, proje bağımlılıklarını yönetme ve kendi paketlerini paylaşma imkanı sunar.

TEMEL ÖZELLİKLERİ

Paket yükleme ve yönetme

Bağımlılık kontrolü

Proje otomasyonu

Paket paylaşım platformu

NPM'İN SAĞLADIĞI AVANTAJLAR

Modül ekosistemine erişim sayesinde:
• Milyonlarca hazır çözüm
• Kod tekrar kullanımı
• Topluluk desteği
• Hızlı proje geliştirme

PAKET KAVRAMI

Bir NPM paketi, belirli bir işlevi yerine getirmek üzere hazırlanmış kod koleksiyonudur. Örneğin:
• React - Kullanıcı arayüzü oluşturma
• Axios - HTTP istekleri
• Express - Sunucu oluşturma

PROJE DOSYALARI

NPM kullanırken üç önemli dosya oluşur:

package.json - Proje ayarları ve bağımlılıklar

package-lock.json - Versiyon kilit dosyası

node_modules - İndirilen paketlerin bulunduğu klasör

TEMEL KOMUTLAR

• Paket yükleme: npm install [paket-adı]
• Geliştirme bağımlılığı ekleme: npm install --save-dev [paket-adı]
• Paket kaldırma: npm uninstall [paket-adı]
• Tüm bağımlılıkları yükleme: npm install

package.json DOSYASI

Projenin kalbi olan bu dosya:
• Proje bilgilerini içerir
• Bağımlılıkları listeler
• Otomasyon scriptlerini barındırır
• Versiyon kontrolü sağlar

NPM OLMASA NE OLURDU?

• Manuel bağımlılık yönetimi
• Versiyon çakışmaları
• Paylaşım zorlukları
• Otomasyon eksikliği

ÖNEMLİ BİLGİLER

NPM, Node.js ile birlikte otomatik kurulur

Paketler "node_modules" klasörüne yüklenir

Geliştirme bağımlılıkları ayrıca yönetilir

Topluluk tarafından sürekli güncellenir

KULLANIM TÜYOLARI

• npx ile geçici paket kullanımı
• npm audit ile güvenlik kontrolü
• npm update ile güncellemeler
• npm run [script] ile otomasyon

NPM, modern JavaScript geliştirmenin temel taşlarından biridir ve profesyonel projelerde vazgeçilmez bir araçtır.

/******************************************/

JavaScript web uygulamaları geliştirmek için kullanılan bir programlama dilidir. Google'ın V8 motoru üzerinde çalışır. V8 moturu JavaScript kodlarını derleyerek makine diline çevirir. Node.js JavaScript kodlarını sunucu taraında çalıştıran V8 motoru üzerine inşa edilmiş bir runtime envirement(Çalışma zamanı ortamı) dır. Node.js JavaScript kodlarını sunucu tarafında çalıştırmak için çeşitli modüller sunar. Örg: fs, http, path, os v.b. React modern UI tasarımları oluşturmak için kullanılan bir JavaScript kütüphanesidir. Virtual Dom kullanır, bu sayede hızlı render işlemleri gerçekleştirebilir. SPA için çok elverişlidir. Bir component değiştiğinde tüm sayfa render edilmez sadece ilgili bileşen yeniden çizilir. Vite bir geliştirme sunucusu ve derleme aracıdır. React web uygulamalarının geliştirilebilmesi için geliştirme sunucusu oluşturur ve tüm projeyi derleyip bir dosyada tutarak dağıtıma hazır hale getirir. JSX JavaScript kodları içinde HTML etiketleri kullanılmasını sağlayan bir yapıdır. Bu yapıda JavaScript kodları içinde css özellikleri kullanılabilir. Ant Design modern ve responsive UI componentleri sağlayan bir JavaScript kütüphanesidir. NPM node.js için bir paket yöneticisidir. React, Vite gibi kütüphaneler NPM ile yüklenip bağımlılıkları yönetilir. 
/******************************************/
